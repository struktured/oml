(*
   Copyright 2015:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils

let () =
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group "Rank"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in

  let max_array_size = 400 in  (* arbitrary *)
  let ordered_array =
    Gen.(make_int 1 max_array_size
         |> map1 (fun s -> Array.init s (fun i -> float_of_int i))
                 (fun arr -> Printf.sprintf "Array of length %d" (Array.length arr)))
  in
  let floats_from_small_set =
    Gen.(select_array (Array.init 20 float_of_int) string_of_float)
  in
  let array_with_duplicates size =
    Gen.(array (make_int 1 10) floats_from_small_set)
  in
  add_random_test
    ~title:"On arrays from [0,n] are identical."
    ordered_array
    (fun arr -> arr = (ranks ~start:0 arr))
    Spec.([just_postcond_pred is_true]);
  add_random_test
    ~title:"Summing the ranks should equal sum of numbers"
    Gen.(barray_float max_float max_array_size)
    (fun arr ->
      let ranks_nn = ranks arr in (* only true if ~start is 1 *)
      let sum = Array.fold_left (+.) 0.0 ranks_nn in
      let size = float (Array.length arr) in
      sum = 0.5 *. size *. (size +. 1.0))
    Spec.([just_postcond_pred is_true]);
  add_random_test
    ~title:"Averaging works for duplicates too"
    Gen.(array_with_duplicates max_array_size)
    (fun arr ->
      let ranks_nn = ranks ~average_ties:true arr in
      let sum = Array.fold_left (+.) 0.0 ranks_nn in
      let size = float (Array.length arr) in
      sum = 0.5 *. size *. (size +. 1.0))
    Spec.([just_postcond_pred is_true]);
  ()
