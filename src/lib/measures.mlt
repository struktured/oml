(*
   Copyright 2015:
     Carmelo Piccione <carmelo.piccione@gmail.com>
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Test_utils

let () =
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group "Measures"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  add_random_test
    ~title:"Normal kl divergence approaches infinity as means diverge"
    Gen.(zip2 (make_float 0.0 1e8) (make_float 0.0 1e8))
    (fun (p_mean, q_mean) ->
      let p_sigma = max 0.1 (sqrt @@ abs_float p_mean) in
      let q_sigma = p_sigma in
      let kldiv q_mean = (*Oml.Measures.*) normal_kl_divergence
        ~p_mean ~q_mean ~p_sigma ~q_sigma in
      List.fold_left
      (fun (res, kl, l) frac ->
        let delta = (p_mean -. res) *. frac in
        let res' = res +. delta in
        let kl' = kldiv res' in
        (res', kl', (res', kl, kl')::l)) (q_mean, infinity, [])
      [0.6;0.4;0.25;0.1] |> fun (_, _, l) ->
        List.for_all (fun (res, kl, kl') -> kl' <= kl) l)
    Spec.([just_postcond_pred is_true]);

  add_random_test
    ~title:"Normal kl divergence approaches infinity as sigmas diverge"
    Gen.(zip2 (make_float 0.01 1e8) (make_float 0.01 1e8))
    (fun (p_sigma, q_sigma) ->
      let p_mean = p_sigma *. p_sigma in
      let q_mean = p_mean in
      let kldiv q_sigma = (*Oml.Measures.*) normal_kl_divergence
        ~p_mean ~q_mean ~p_sigma ~q_sigma in
      List.fold_left
      (fun (res, kl, l) frac ->
        let delta = (p_sigma -. res) *. frac in
        let res' = res +. delta in
        let kl' = kldiv res' in
        (res', kl', (res', kl, kl')::l)) (q_sigma, infinity, [])
      [0.6;0.4;0.25;0.1] |> fun (_, _, l) ->
        List.for_all (fun (res, kl, kl') -> kl' <= kl) l)
    Spec.([just_postcond_pred is_true]);

  ()
