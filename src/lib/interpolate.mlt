(*
   Copyright 2015:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Printf
open Test_utils

let () =
  (*let add_simple_test = Test.add_simple_test_group "Interpolate" in*)
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group "Interpolate"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  let point b = Gen.(zip2 (bfloat b) (bfloat b)) in
  add_random_test
    ~title:"Linear arguments can be specified in any order \
                  (aka, two points determine a line)"
    Gen.(zip3 (point 1e8) (point 1e8) (bfloat 1e8))
    (fun (p1, p2, x) ->
      let y1 = linear p1 p2 x in
      let y2 = linear p2 p1 x in
      equal_floats ~d:1e-6 y1 y2)
    Spec.([just_postcond_pred is_true]);

  let random_test_array b = Gen.(array (make_int 2 50) (bfloat b)) in
  let min_data_size = 3 in
  let spline b =
                                 (* 2: vector for x and y values *)
    Gen.(matrix (make_int min_data_size 50) (lift 2 "2") (bfloat b)
         |> map1 (fun matrix ->
              let n = Array.length matrix in
              Array.init n (fun i -> matrix.(i).(0), matrix.(i).(1)))
              (array_to_string (fun (x,y) -> sprintf "(%f,%f)" x y))
         |> map1 (Spline.fit) (fun s ->
              array_to_string (fun (x,y) -> sprintf "(%f,%f)" x y)
                (Spline.knots s)))
  in
  let array_equal d a1 a2 =
    Array.zip a1 a2
    |> Array.all (fun (x,y) -> equal_floats ~d:1e-4 x y)
  in
  add_random_test
    ~title:"Tri-diagonal matrix solver works."
    ~nb_runs:1000
    Gen.(matrix (make_int 2 50) (lift 4 "4") (bfloat 1e6)
         |> map1 (fun m ->
             Array.map (fun r -> r.(0), r.(1), r.(2)) m,
             Array.map (fun r -> r.(3)) m)
            (fun (c,d) ->
              sprintf "c: %s, d: %s"
                (array_to_string (fun (a,b,c) -> sprintf "[%f;%f;%f;]" a b c) c)
                (array_to_string string_of_float d)))
    (fun (c,d) ->
      let v = Tri_Diagonal.solve c d in
      let dd = Tri_Diagonal.mult c v in
      array_equal 1e-4 d dd)
    Spec.([just_postcond_pred is_true]);

  add_random_test
    ~title:"Evaluating as an array is equivalent to mapping across array."
    Gen.(zip2 (spline 1e8) (random_test_array 1e8))
    (fun (s, d) ->
      let () = Array.sort compare d in
      let f1 = Array.map (Spline.eval s) d in
      let f2 = Spline.eval_arr s d in
      f1 = f2)
    Spec.([just_postcond_pred is_true]);

  (* TODO: Add a test to of the 2nd derivatives around knots to make sure
    they're roughly equal. *)

  ()

