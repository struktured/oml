(*
   Copyright 2015:
     Leonid Rozenberg <leonidr@gmail.com>

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*)

open Printf
open Util
open Test_utils

let () =
  let add_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_random_test_group "Solvers"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  let add_partial_random_test
    ?title ?nb_runs ?nb_tries ?classifier
    ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec =
    Test.add_partial_random_test_group "Solvers"
      ?title ?nb_runs ?nb_tries ?classifier
      ?reducer ?reduce_depth ?reduce_smaller ?random_src gen f spec
  in
  let polynomial = Gen.(list (make_int 2 10) (bfloat 1e5)) in
    let poly_to_f = function
    | []  -> fun _ -> 0.0
    | lst -> fun x -> List.fold_left (fun p r -> p *. (x -. r)) 1.0 lst
  in
  let lower = -1e10 in
  let upper = 1e10 in
  let even_length lst = List.length lst mod 2 = 0 in
  add_partial_random_test
    ~title:"Bisection works for odd polynomials."
    ~nb_runs:10000
      Gen.(polynomial)
      (fun lst ->
        bisection ~epsilon:1e-12 ~lower ~upper (poly_to_f lst))
      Spec.([ even_length       ==> is_exception is_invalid_arg
            ; (not even_length) => (fun (lst,r) ->
              match r with
              | Kaputt.Specification.Result v -> List.exists (equal_floats ~d:1e-9 v) lst
              | Kaputt.Specification.Exception _ -> false)
            ]);

  let odd_poly   =
    Gen.(polynomial
      |> transform (fun lst ->
        (* Remember that fst is X^0 -> even number of terms = odd poly *)
        if List.length lst mod 2 = 0 then List.tl lst else lst))
  in

  (* TODO, figure out a way to make this a partial test. *)
  add_random_test
    ~title:"Newton work for odd polynomials."
      Gen.(odd_poly)
      (fun lst ->
        let f = poly_to_f lst in
        match newton ~init:0.1 ~lower ~upper f with
        | exception Iteration_failure (_, Too_many_iterations _) ->
            let _ =
              Printf.printf "newton failed for %s with Too_many_iterations\n%!"
                (String.concat ";" (List.map (sprintf "%f") lst))
            in
            true
        | rn ->
          equal_floats ~d:1e-3 0.0 (f rn)
        (*let rb = bisection ~epsilon:1e-2 ~lower ~upper f in *)
        (*equal_floats ~d:1e-3 0.0 (f rb)*))
    Spec.([just_postcond_pred is_true]);

  ()

